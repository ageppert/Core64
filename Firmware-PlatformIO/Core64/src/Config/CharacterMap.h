
/*
PURPOSE:
// Character Map
// Characters could be 4*5 (w*h) to save space or full 8*8.
// A full alphabet table is 26 x 5 x 4 bits = 65 bytes (if stored maximum efficiently)
// Array arranged directly as "I [heart] CORE MEMORY!" = 16 elements, numbered 0 to 15

SETUP:
- none
*/
 
#ifndef CHARACTER_MAP_H
  #define CHARACTER_MAP_H

  #if (ARDUINO >= 100)
    #include <Arduino.h>
  #else
    #include <WProgram.h>
  #endif

  #include <stdint.h>

  // Use program memory for constants
  // https://forum.arduino.cc/index.php?topic=45681.0

  const static bool character_font_wide[15][8][8] PROGMEM = {   // Character, Row, Column
  {
    {0,0,1,1,1,1,0,0}, // I
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,0,1,1,0,1,1,0}, // heart
    {0,1,1,1,1,1,1,1},
    {0,1,1,1,1,1,1,1},
    {0,1,1,1,1,1,1,1},
    {0,0,1,1,1,1,1,0},
    {0,0,0,1,1,1,0,0},
    {0,0,0,0,1,0,0,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,0,1,1,1,1,0,0}, // C
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,0,0,1,1,0},
    {0,0,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,0,1,1,1,1,0,0}, // O
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,0,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,1,1,1,1,1,0,0}, // R
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,1,1,1,0,0},
    {0,1,1,1,1,0,0,0},
    {0,1,1,0,1,1,0,0},
    {0,1,1,0,0,1,1,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,1,1,1,1,1,1,0}, // E
    {0,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,1,1,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,1,1,1,1,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0}, // space
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,1,0,1,0,1,0,1}
  },
  {
    {0,1,1,0,0,0,1,1}, // M
    {0,1,1,1,0,1,1,1},
    {0,1,1,1,1,1,1,1},
    {0,1,1,0,1,0,1,1},
    {0,1,1,0,0,0,1,1},
    {0,1,1,0,0,0,1,1},
    {0,1,1,0,0,0,1,1},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,1,1,1,1,1,1,0}, // E
    {0,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,1,1,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,0,0,0,0,0},
    {0,1,1,1,1,1,1,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,1,1,0,0,0,1,1}, // M
    {0,1,1,1,0,1,1,1},
    {0,1,1,1,1,1,1,1},
    {0,1,1,0,1,0,1,1},
    {0,1,1,0,0,0,1,1},
    {0,1,1,0,0,0,1,1},
    {0,1,1,0,0,0,1,1},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,0,1,1,1,1,0,0}, // O
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,0,1,1,1,1,0,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,1,1,1,1,1,0,0}, // R
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,1,1,1,1,1,0,0},
    {0,1,1,1,1,0,0,0},
    {0,1,1,0,1,1,0,0},
    {0,1,1,0,0,1,1,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,1,1,0,0,1,1,0}, // Y
    {0,1,1,0,0,1,1,0},
    {0,1,1,0,0,1,1,0},
    {0,0,1,1,1,1,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,1,1,0,0,0}, // !
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,1,1,0,0,0},
    {0,0,0,0,0,0,0,0}
  },
  {
    {0,0,0,0,0,0,0,0}, // space
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0},
    {0,1,0,1,0,1,0,1}
  }
  };

  const static uint8_t NumberOfFontCharactersToScroll16bit = 9;
  const static bool character_font_wide_16bit[9][4][4] PROGMEM = {   // Character, Row, Column
  {
    {0,1,1,1}, // I
    {0,0,1,0},
    {0,0,1,0},
    {0,1,1,1}
  },
  {
    {0,0,0,0}, // heart
    {0,1,0,1},
    {0,1,1,1},
    {0,0,1,0}
  },
  {
    {0,1,1,1}, // C
    {0,1,0,0},
    {0,1,0,0},
    {0,1,1,1}
  },
  {
    {0,1,1,1}, // O
    {0,1,0,1},
    {0,1,0,1},
    {0,1,1,1}
  },
  {
    {0,1,1,1}, // R
    {0,1,1,1},
    {0,1,1,0},
    {0,1,0,1}
  },
  {
    {0,1,1,1}, // E
    {0,1,1,0},
    {0,1,1,0},
    {0,1,1,1}
  },
  {
    {0,0,1,0}, // 1
    {0,1,1,0},
    {0,0,1,0},
    {0,1,1,1}
  },
  {
    {0,0,1,1}, // 6
    {0,1,0,0},
    {0,1,1,1},
    {0,1,1,1}
  },
  {
    {0,0,0,0}, // space
    {0,0,0,0},
    {0,0,0,0},
    {0,0,0,0}
  }
  };


  const static uint8_t NumberOfColorFontSymbols = 18;
  const static uint8_t ColorFontSymbols[NumberOfColorFontSymbols][8][8] PROGMEM = {   // Character, Row, Column
    // 0
    { {  0,  0,  0, 85, 85,  0, 42,  0},     // DGAUSS Menu Symbol
      {  0,127, 85,  0,  0, 42,  0, 42},     // D for Demos, in blue 127
      {127,127, 85,  0, 85, 42, 42, 42},     // G for Games, in fun Green 85
      {127,127,  0, 85, 85, 42,  0, 42},     // A for Applications, in Yellow 42
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {170,  0,170,  0,222,222,254,254},     // U for Utilities, in Blue 170
      {170,  0,170,  0,222,  0,254,  0},     // S for Special, in Purple 220
      {170,170,170,222,222,254,254,  0} },   // S for Settings, in Red 254 (255 is used as WHITE)
    // 1
    { {  0,  0,127,  0,127,127,127,  0},
      {  0,127,127,  0,127,127,  0,  0},
      {  0,127,127,  0,127,127,127,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {127,127,127,  0,  0,127,  0,  0},
      {127,127,127,  0,127,  0,127,  0},
      {127,  0,127,  0,  0,127,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   // DEMO Sub-Menu Icon
    // 2
    { {  0, 85, 85,  0,  0, 85,  0,  0},
      { 85,  0,  0,  0, 85,  0, 85,  0},
      { 85,  0, 85,  0, 85, 85, 85,  0},
      {  0, 85, 85,  0, 85,  0, 85,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      { 85, 85, 85,  0, 85, 85, 85,  0},
      { 85, 85, 85,  0, 85, 85,  0,  0},
      { 85,  0, 85,  0, 85, 85, 85,  0}  },   // GAME Sub-Menu Icon
    // 3
    { { 0,42, 0, 0, 0, 0, 0, 0},
      {42, 0,42, 0, 0, 0, 0, 0},
      {42,42,42, 0, 0, 0, 0, 0},
      {42, 0,42,42,42, 0, 0, 0},
      { 0, 0, 0,42,42, 0, 0, 0},
      { 0, 0, 0,42, 0,42,42, 0},
      { 0, 0, 0, 0, 0,42,42, 0},
      { 0, 0, 0, 0, 0,42, 0, 0}  },   // APP Sub-Menu Icon
    // 4
    { {170,  0,170,  0,170,170,170,  0},
      {170,  0,170,  0,  0,170,  0,  0},
      {170,170,170,  0,  0,170,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {170,170,170,  0,170,  0,  0,  0},
      {  0,170,  0,  0,170,  0,  0,  0},
      {170,170,170,  0,170,170,170,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   // UTIL Sub-Menu Icon
    // 5
    { {  0,220,220,  0,220,220,  0,  0},
      {  0,220,  0,  0,220,220,  0,  0},
      {220,220,  0,  0,220,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {220,220,220,  0,  0,220,220,  0},
      {220,220,  0,  0,220,  0,  0,  0},
      {220,220,220,  0,  0,220,220,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   // SPECIAL Sub-Menu Icon
    // 6
    { {254,254,  0,254,254,254,  0,  0},
      {254,  0,  0,254,254,  0,  0,  0},
      {254,254,  0,254,254,254,  0,  0},
      {  0,254,  0,  0,  0,  0,  0,  0},
      {254,254,  0,  0,254,254,254,  0},
      {  0,  0,  0,  0,  0,254,  0,  0},
      {  0,  0,  0,  0,  0,254,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   // SETTINGS Sub-Menu Icon
    // 7
    { {1,1,1,0,1,1,1,0},
      {1,0,0,0,1,0,1,0},
      {1,1,1,0,1,1,1,0},
      {0,0,0,0,0,0,0,0},
      {1,1,1,0,1,1,1,0},
      {1,1,0,0,1,1,0,0},
      {1,0,1,0,1,1,1,0},      // C O
      {0,0,0,0,0,0,0,0}  },   // R E 
    // 8
    { {0,0,0,0,0,0,0,0},
      {1,1,1,0,1,0,1,0},
      {1,0,0,0,1,0,1,0},
      {1,1,1,0,1,1,1,0},
      {1,0,1,0,0,0,1,0},
      {1,1,1,0,0,0,1,0},
      {0,0,0,0,0,0,0,0},
      {0,0,0,0,0,0,0,0}  },   // 64
    // 9
    { {0,0,0,1,1,1,1,1},
      {0,0,1,0,0,1,0,0},
      {0,0,1,0,0,1,0,0},
      {0,0,1,0,0,1,0,0},
      {0,0,1,0,0,1,0,0},
      {0,0,1,0,0,1,0,0},
      {0,0,1,0,0,1,0,0},
      {1,1,1,1,1,0,0,0}  },   // Hysteresis Loop
    // 10
    { {  0,  0,  1,  1,  1,  0,  0,  0},
      {  0, 35, 35, 35, 35,  0,  0,  0},
      { 35, 35,  0,  0,  0, 35, 35, 35},
      { 65, 65,  0,  0,  0, 65, 65,  0},
      { 96, 96,  0,  0,  0, 96, 96, 96},
      {  0,160,160,160,160,  0,  0,  0},
      {  0,  0,160,160,160,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },  // C=
    // 11
    { {  0,255,  0,  0,  0,  0,255,  0},
      {255,255,  0,255,255,  0,255,255},
      {  0,  0,255,255,255,255,  0,  0},
      {  0,  0,255,  0,  0,255,  0,  0},
      {  0,  0,255,255,255,255,  0,  0},
      {  0,  0,255,255,255,255,  0,  0},
      {255,255,  0,255,255,  0,255,255},
      {  0,255,  0,  0,  0,  0,255,  0}  },  // Hackaday logo
    // 12
    { {135,  0,135,  0,  0,135,135,135},
      {135,  0,135,  0,  0,135,  0,  0},
      {135,  0,135,  0,  0,135,135,  0},
      {  0,135,  0,  0,  0,135,  0,  0},
      {  0,  0,  0,135,135,  0,  0,  0},
      {  0,  0,135,  0,  0,  0,  0,  0},
      {  0,  0,135,  0,  0,  0,  0,  0},
      {  0,  0,  0,135,135,  0,  0,  0}  },   // VCF logo
    // 13
    { {  0,170,170,170,170,170,220,220},
      {  0,170,170,170,170,170,220,220},
      {  0,170,170,  0,  0,  0,  0,  0},
      {  0,170,170,170,170,170,170,  0},
      {  0,170,170,170,170,170,170,  0},
      {  0,  0,  0,  0,  0,170,170,  0},
      {170,170,170,170,170,170,170,  0},
      {170,170,170,170,170,170,170,  0}  },  // Snake Game logo
    // 14
    { {255,  0,  0,  0,  0,  0,  0,  0},
      {255,  0,  0,  0,  0,  0,  0,  0},
      {255,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,255},
      {  0,  0,  0,  0,  0,  0,  0,255},
      {  0,  0,  0,  0,  0,  0,  0,255},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },  // Pong Game logo
    // 15
    { {  0,  0,  0,  0,  0,  0,200,  0},
      {  0,  0,  0,  0,  0,  0,200,  0},
      {  0,  0,  0,  0,  0,  0,200,  0},
      {  0,  0,  0,  0,  0,  0,200,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0, 60,  0,  0},
      {254,  0,155,155,155, 60,  0,  0},
      {254,254,254,155, 60, 60,  0,  0}  },  // Tetris Game logo
    // 16
    { {  0,  0,  0,  0,  0,  0,  0,  0},
      { 20,  0, 20,  0,  0,  0, 20,  0},
      { 20,  0, 20,  0, 20,  0, 20,  0},
      { 20, 20, 20,  0,  0,  0, 20,  0},
      { 20,  0, 20,  0, 20,  0,  0,  0},
      { 20,  0, 20,  0, 20,  0, 20,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },  // "Hi!"
    // 17
    { {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0, 15, 15,  0,  0, 15, 15,  0},
      {  0, 15, 15,  0,  0, 15, 15,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0, 15,  0,  0,  0,  0, 15,  0},
      {  0,  0, 15, 15, 15, 15,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  }   // Smiley face
  };


  const static uint8_t NumberOfColorFontSymbols16bit = 18;
  const static uint8_t ColorFontSymbols16bit[NumberOfColorFontSymbols16bit][4][4] PROGMEM = {   // Character, Row, Column
    // 0                  // DGAUSS Menu Symbol
    { { 127, 85, 85, 42},
      { 127, 85, 85, 42},
      { 170,170,222,254}, 
      { 170,170,222,254} }, 
    // 1                  // DEMO Sub-Menu Icon  
    { {127,127,  0,  0},
      {127,  0,127,  0},
      {127,  0,127,  0}, 
      {127,127,  0,  0} }, 
    // 2                  // GAME Sub-Menu Icon
    { {  0, 85, 85,  0},
      { 85,  0,  0,  0},
      { 85,  0, 85,  0}, 
      {  0, 85, 85,  0} }, 
    // 3                  // APP Sub-Menu Icon
    { {  0, 42,  0,  0},
      { 42,  0, 42,  0},
      { 42, 42, 42,  0}, 
      { 42,  0, 42,  0} }, 
    // 4                  // UTIL Sub-Menu Icon
    { {170,  0,  0,170},
      {170,  0,  0,170},
      {170,  0,  0,170}, 
      {  0,170,170,  0} }, 
    // 5                  // SPECIAL Sub-Menu Icon
    { {  0,220,220,  0},
      {  0,220,  0,  0},
      {  0,220,  0,  0}, 
      {220,220,  0,  0} }, 
    // 6                  // SETTINGS Sub-Menu Icon
    { {  0,  0,254,254},
      {  0,  0,254,  0},
      {  0,  0,254,  0}, 
      {  0,254,254,  0} }, 
    // 7                  // C is for CORE
    { {  0,  1,  1,  0},
      {  1,  0,  0,  0},
      {  1,  0,  0,  0}, 
      {  0,  1,  1,  0} }, 
    // 8                  // 16
    { {  1,  0,  1,  1},
      {  1,  0,  1,  0},
      {  1,  0,  1,  1}, 
      {  1,  0,  1,  1} }, 
    // 9                  // Hysteresis Loop
    { {  0,  1,  1,  1},
      {  0,  1,  1,  0},
      {  0,  1,  1,  0}, 
      {  1,  1,  1,  0} }, 
    // 10                 // C=
    { {  0, 15,  0,  0},
      { 65,  0, 65, 65},
      { 96,  0, 96, 96}, 
      {  0,160,  0,  0} }, 
    // 11                 // Hackaday logo
    { {255,  0,  0,255},
      {  0,255,255,  0},
      {  0,255,255,  0}, 
      {255,  0,  0,255} }, 
    // 12                 // VCF logo
    { {  1,  0,  1,  0},
      {  1,  0,  1,  0},
      {  1,  0,  1,  0}, 
      {  0,  1,  0,  0} }, 
    // 13                 // Snake Game logo
    { {  0,170,220,  0},
      {  0,170,  0,  0},
      {  0,170,  0,  0}, 
      {170,170,  0,  0} }, 
    // 14                 // Pong Game logo
    { {255,  0,  0,  0},
      {255,255,  0,  0},
      {  0,  0,  0,255}, 
      {  0,  0,  0,255} }, 
   // 15                  // Tetris Game logo
    { {  0,  0,  0,200},
      {  0,  0,  0,200},
      {  0,  0, 60,  0}, 
      {  0, 60, 60,  0} }, 
    // 16                 // "Hi!"
    { { 20,  0, 20,  0},
      { 20,  0, 20,  0},
      { 20, 20, 20,  0}, 
      { 20,  0, 20,  0} }, 
    // 17                               // Smiley face
    { {  0, 15, 15,  0},
      {  0,  0,  0,  0},
      { 15,  0,  0, 15}, 
      {  0, 15, 15,  0} } 
  };

  // Paint mode uses hue and saturation so two tables are used. One for Hue, the other for Saturation.
  const static uint8_t AppPaintSymbols16bitHue[4][4][4] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { { 10, 20, 30,  0},
      { 20,  0, 40,  0},
      { 30, 40, 60,  0},
      { 50, 60,  0,  0}  },  //  App Paint logo
    // 1
    { {  0,  0,  0,  0},
      {  0,  0,  0,  0},
      {  0,  1, 75,150},
      {  0,  1, 75,150}  },  //  App Paint Color Palette Bottom
    // 2
    { {  0,  1, 75,150},
      {  0,  1, 75,150},
      {  0,  0,  0,  0},
      {  0,  0,  0,  0}  },   //  App Paint Color Palette Top
    // 3  Hysteresis Loop
    { { 25,  1,  1,  1},
      { 25,  1,  1, 25},
      { 25,  1,  1, 25}, 
      {  1,  1,  1, 25} }, 
  };

  const static uint8_t AppPaintSymbols16bitSat[4][4][4] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { {255,255,255,  0},
      {255,  0,255,  0},
      {255,255,255,  0},
      {255,255,  0,  0}, },  //  App Paint logo
    // 1
    { {  0,  0,  0,  0},
      {  0,  0,  0,  0},
      {  0,255,255,255},
      {  0,195,195,195}  },  //  App Paint Color Palette Bottom
    // 2
    { {  0,255,255,255},
      {  0,195,195,195},
      {  0,  0,  0,  0},
      {  0,  0,  0,  0}  },   //  App Paint Color Palette Top
    // 3
    { {255,255,255,255},
      {255,255,255,255},
      {255,255,255,255},
      {255,255,255,255}  }   // Hysteresis Loop
  };


  // Paint mode uses hue and saturation so two tables are used. One for Hue, the other for Saturation.
  const static uint8_t AppPaintSymbolsHue[4][8][8] PROGMEM = {   // Symbol #, Row, Column
     // 0
    { { 10, 10, 20, 20, 30, 30,  0,  0},
      { 10, 20, 20, 30, 30, 40,  0,  0},
      { 20, 20,  0,  0, 40, 40,  0,  0},
      { 20, 30,  0,  0, 40, 50,  0,  0},
      { 30, 30, 40, 40, 50, 50,  0,  0},
      { 30, 40, 40, 50, 50, 60,  0,  0},
      { 40, 40,  0,  0,  0,  0,  0,  0},
      { 40, 50,  0,  0,  0,  0,  0,  0}  },  //  App Paint logo
    // 1
    { {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  1, 30, 75,100,150,230,255},
      {  0,  1, 30, 75,100,150,200,  0}  },  //  App Paint Color Palette Bottom
    // 2
    { {  0,  1, 30, 75,100,150,230,255},
      {  0,  1, 30, 75,100,150,200,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   //  App Paint Color Palette Top
    // 3
    { { 25, 25, 25,  1,  1,  1,  1,  1},
      { 25, 25,  1, 25, 25,  1, 25, 25},
      { 25, 25,  1, 25, 25,  1, 25, 25},
      { 25, 25,  1, 25, 25,  1, 25, 25},
      { 25, 25,  1, 25, 25,  1, 25, 25},
      { 25, 25,  1, 25, 25,  1, 25, 25},
      { 25, 25,  1, 25, 25,  1, 25, 25},
      {  1,  1,  1,  1,  1, 25, 25, 25}  }   // Hysteresis Loop
  };

  const static uint8_t AppPaintSymbolsSat[4][8][8] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { {255,255,255,255,255,255,  0,  0},
      {255,255,255,255,255,255,  0,  0},
      {255,255,  0,  0,255,255,  0,  0},
      {255,255,  0,  0,255,255,  0,  0},
      {255,255,255,255,255,255,  0,  0},
      {255,255,255,255,255,255,  0,  0},
      {255,255,  0,  0,  0,  0,  0,  0},
      {255,255,  0,  0,  0,  0,  0,  0}  },  //  App Paint logo
    // 1
    { {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,255,255,255,255,255,255,255},
      {  0,195,195,195,195,195,195,  0}  },  //  App Paint Color Palette Bottom
    // 2
    { {  0,255,255,255,255,255,255,255},
      {  0,195,195,195,195,195,195,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   //  App Paint Color Palette Top
    // 3
    { {255,255,255,255,255,255,255,255},
      {255,255,255,255,255,255,255,255},
      {255,255,255,255,255,255,255,255},
      {255,255,255,255,255,255,255,255},
      {255,255,255,255,255,255,255,255},
      {255,255,255,255,255,255,255,255},
      {255,255,255,255,255,255,255,255},
      {255,255,255,255,255,255,255,255}  }   // Hysteresis Loop
  };

  const static uint8_t GameSnakeSymbols[3][8][8] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { {  0,170,170,170,170,170,220,220},
      {  0,170,170,170,170,170,220,220},
      {  0,170,170,  0,  0,  0,  0,  0},
      {  0,170,170,170,170,170,170,  0},
      {  0,170,170,170,170,170,170,  0},
      {  0,  0,  0,  0,  0,170,170,  0},
      {170,170,170,170,170,170,170,  0},
      {170,170,170,170,170,170,170,  0}  },  //  Snake Game logo
    // 1
    { {  0, 85, 85,  0,  0,  0, 85, 85},
      {  0, 85, 85,  0,  0,  0, 85, 85},
      {  0, 85, 85,  0,  0,  0, 85, 85},
      {  0, 85, 85,  0, 85,  0, 85, 85},
      {  0, 85, 85, 85, 85, 85, 85, 85},
      {  0, 85, 85, 85,  0, 85, 85, 85},
      {  0, 85, 85,  0,  0,  0, 85, 85},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   //  Snake Game Win "W" in green
    // 2
    { {  0,254,254,  0,  0,  0,  0,  0},
      {  0,254,254,  0,  0,  0,  0,  0},
      {  0,254,254,  0,  0,  0,  0,  0},
      {  0,254,254,  0,  0,  0,  0,  0},
      {  0,254,254,  0,  0,  0,  0,  0},
      {  0,254,254,  0,  0,  0,  0,  0},
      {  0,254,254,254,254,254,254,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  }    //  Snake Game Lose "L" in red
  };

const static uint8_t GameSnakeSymbols16bit[3][4][4] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { {  0,170,170,220},
      {  0,170,  0,  0},
      {  0,  0,170,  0},
      {  0,170,170,  0}  },  //  Snake Game logo
    // 1
    { { 85,  0,  0, 85},
      { 85,  0,  0, 85},
      {  0, 85, 85,  0},
      {  0, 85, 85,  0}  },   //  Snake Game Win "W" in green
    // 2
    { {  0,254,  0,  0},
      {  0,254,  0,  0},
      {  0,254,  0,  0},
      {  0,254,254,254}  }    //  Snake Game Lose "L" in red
  };

  const static uint8_t GamePongSymbols[3][8][8] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { {255,  0,  0,  0,  0,  0,  0,  0},
      {255,  0,  0,  0,  0,  0,  0,  0},
      {255,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,255,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,255},
      {  0,  0,  0,  0,  0,  0,  0,255},
      {  0,  0,  0,  0,  0,  0,  0,255},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   // Pong Game Intro 
    // 1
    { {  0, 85,  0,  0,  0,  0,  0,  0},
      { 85, 85,  0,  0,  0,  0,  0,  0},
      {  0, 85,  0,  0,  0,  0,  0,  0},
      {  0, 85,  0,  0,  0,  0,  0,  0},
      { 85, 85, 85,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   //  Pong Game Win "W1" in green
    // 2
    { {  0,  0,  0,  0,  0, 85,  0,  0},
      {  0,  0,  0,  0, 85, 85,  0,  0},
      {  0,  0,  0,  0,  0, 85,  0,  0},
      {  0,  0,  0,  0,  0, 85,  0,  0},
      {  0,  0,  0,  0, 85, 85, 85,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  }    //  Pong Game Lose "W2" in green
  };

  const static uint8_t GamePongSymbols16bit[3][4][4] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { {255,  0,  0,  0},
      {255,  0,  0,255},
      {  0,255,  0,255},
      {  0,  0,  0,  0}  },   // Pong Game Intro 
    // 1
    { {  0, 85,  0,  0},
      { 85, 85,  0,  0},
      {  0, 85,  0,  0},
      { 85, 85, 85,  0}  },   //  Pong Game Win "W1" in green
    // 2
    { {  0,  0, 85,  0},
      {  0, 85, 85,  0},
      {  0,  0, 85,  0},
      {  0, 85, 85, 85}  }    //  Pong Game Lose "W2" in green
  };

  const static uint8_t UtilFluxSymbols[2][8][8] PROGMEM = {   // Symbol #, Row, Column
    // 0
    { {  0,  0,  0,  0,255,255,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,  0,255,255,255,  0,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,255,255,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   // Flux Detector Symbol
    // 1
    { { 96,  0,  0,  0,255,255,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,  0,255,255,255,  0,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,  0,  0,255,  0,  0,  0,  0},
      {  0,255,255,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  }   // Flux Detector Symbol, testing upper left core only
  };

#endif // CHARACTER_MAP_H

/*
    // ##
    { {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0},
      {  0,  0,  0,  0,  0,  0,  0,  0}  },   // Blank Template
*/